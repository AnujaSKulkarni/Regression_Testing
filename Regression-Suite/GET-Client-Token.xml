<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="4d9b8d24-cdbf-470c-926c-ce1cd761a7a0" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET Client Token" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="4d9b8d24-cdbf-470c-926c-ce1cd761a7a0fileName">GET-Client-Token</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="groovy" name="Setup" id="28ff5ea0-ec8d-4ea6-8e21-7a1329e1949d">
    <con:settings/>
    <con:config>
      <script>//***********************Transferring Environment Properties to Global Variables***********************
def Property_Count = testRunner.testCase.testSuite.project.propertyCount
def Property_Name
def Property_Value
for(i = 0; i &lt; Property_Count; i++){
	Property_Name = testRunner.testCase.testSuite.project.getPropertyAt(i).name
	Property_Value = testRunner.testCase.testSuite.project.getPropertyValue(Property_Name)
	log.info "Property_Name: " + Property_Name
	log.info "Property_Value: " + Property_Value
	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue(Property_Name, Property_Value)
}




//*************************************************Delete Header*************************************

import com.eviware.soapui.support.types.StringToStringMap 

//Get through all the test steps in the project
testRunner.testCase.testSuite.project.testSuites.each
{
    suite ->
    suite.getValue().testCases.each
    {
        q1->
        q1.getValue().testSteps.each
        {
                       it->
                       if (it.getValue().config.type.equals("restrequest"))
                       {
                               //Get the headers of the current teststep
                               def nextRequest = it.getValue().getHttpRequest()
                               nextRequest.requestHeaders = [:] as StringToStringMap
                       }
        }
    }
}
log.info("************************************************\n Done ! Header deleted for all teststeps!\n************************************************ ")



/*	//*************************************************Read Header*************************************

String Headerfilepath = context.expand( '${Header_File_Path}' )
new File(Headerfilepath).eachLine 
{ 	
	line ->
	def header_name
	def header_value
	def temp_header = line
	temp_header = line.split(":")
	log.info temp_header[0]
	log.info temp_header[1]
	header_name = temp_header[0]
	header_value = temp_header[1]

	
	//*************************************************Add Header*************************************
	//Get through all the test steps in the project
	testRunner.testCase.testSuite.project.testSuites.each
	{
		suite ->
		suite.getValue().testCases.each
		{
			q1->
			q1.getValue().testSteps.each
			{
						   it->
						   if (it.getValue().config.type.equals("restrequest"))
						   {
								   //Get the headers of the current teststep
								   def headers = it.getValue().getHttpRequest().getRequestHeaders()
								   def list = []
								   //Append the new header to the existing list
								   list.add(header_value)
								   headers[header_name] = list;
								   //Set the updated header list
								   it.getValue().getHttpRequest().setRequestHeaders(headers)
						   }
			}
		}
	}
	log.info("************************************************\n Done ! New Header Appended to all teststeps!\n************************************************ ")
}
*/

/* Creating Test Result Directory */
import java.text.SimpleDateFormat

/* Fetching Username of logged in user */
def username = System.getProperty("user.name");

/* Defining &amp; creating Directory */
def today = new Date()
def dateFormat = new SimpleDateFormat("yyyy-MM-dd")
def date_Folder = dateFormat.format(today)
def Environment_Name = context.expand( '${#Project#Environment_Name}' )
file_path = "C:/Users/" + username + "/Documents/TestResults/"
def path = new File(file_path)
path.mkdir()
file_path_2 = file_path + Environment_Name + "/"
def path_2 = new File(file_path_2)
path_2.mkdir()
	
file_path_1 = file_path_2 + date_Folder + "/"
def path_1 = new File(file_path_1)
log.info path_1.exists()
if (path_1.exists() == false){
	log.info "Folder not found"
	path_1.mkdir()
	log.info "Set Run Count to '0'"
	testRunner.testCase.testSuite.setPropertyValue("Run_count", "0")
}
def Run_Count = testRunner.testCase.testSuite.getPropertyValue("Run_count")
Run_Count = Run_Count.toInteger()
Run_Count++
Final_Path = file_path_1 + "Run_Number_" + Run_Count + "/"
log.info Final_Path
Run_Count = Run_Count.toString()
testRunner.testCase.testSuite.setPropertyValue("Run_count", Run_Count)
def final_path = new File(Final_Path)
final_path.mkdir()
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("Test_Result_Path", Final_Path)


/* Creating Excel for test result */
import java.io.FileInputStream
import java.io.InputStream
import java.io.FileOutputStream
import java.io.IOException
import java.util.Iterator
import java.text.SimpleDateFormat
import org.apache.poi.ss.util.CellReference
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.ss.usermodel.DateUtil
import org.apache.poi.ss.usermodel.Row
import org.apache.poi.ss.usermodel.Sheet
import org.apache.poi.ss.usermodel.Workbook
import org.apache.poi.ss.usermodel.WorkbookFactory
import org.apache.poi.hssf.usermodel.HSSFWorkbook
import org.apache.poi.xssf.usermodel.XSSFWorkbook
import org.apache.poi.xssf.streaming.SXSSFWorkbook

def Testresultpath = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Test_Result_Path")
Testresultpath = Testresultpath + "Test_Run_Results.xls"

// create a new file
FileOutputStream out = new FileOutputStream(Testresultpath);
// create a new workbook
Workbook wb = new HSSFWorkbook();
// create a new sheet
Sheet s = wb.createSheet();
// declare a row object reference
Row r = null;
// declare a cell object reference
Cell c = null;


// set the sheet name in Unicode
wb.setSheetName(0,"Test_Run_Results")

r = s.createRow(0)
// create a numeric cell
for(i = 0; i &lt; 5;i++){
	c = r.createCell(i);
	if(i == 0){
		c.setCellValue("TC_Number");
	}
	if(i == 1){
		c.setCellValue("Status");
	}
	if(i == 2){
		c.setCellValue("API_Name");
	}
	if(i == 3){
		c.setCellValue("Execution TimeStamp");
	}
	if(i == 4){
		c.setCellValue("Execution TimeTaken");
	}
}
wb.write(out);
out.close();


/*Run Time Data */
def Rundatapath = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Test_Result_Path")
Rundatapath = Rundatapath + "Run_Time_Data.xls"
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("Run_Time_Data", Rundatapath)

// create a new file
FileOutputStream out1 = new FileOutputStream(Rundatapath);
// create a new workbook
Workbook wb1 = new HSSFWorkbook();
// create a new sheet
Sheet Account = wb1.createSheet();
Sheet Location = wb1.createSheet();
// declare a row object reference
Row r1 = null;
// declare a cell object reference
Cell c1 = null;


// set the sheet name in Unicode
wb1.setSheetName(0,"Account_Run_Time_Data")
wb1.setSheetName(1,"Location_Run_Time_Data")

r1 = Account.createRow(0)
c1 = r1.createCell(0);
c1.setCellValue("Account_ID_Number");
c2 = r1.createCell(1);
c2.setCellValue("Verification_Code");
c3 = r1.createCell(2)
c3.setCellValue("Email_ID")
c4 = r1.createCell(3)
c4.setCellValue("Group_ID")

r1 = Location.createRow(0)
c1 = r1.createCell(0);
c1.setCellValue("Location_ID_Number");
c2 = r1.createCell(1)
c2.setCellValue("Account_ID_Number")
wb1.write(out1);
out1.close();</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="GET Client Token" id="c810a02f-cf50-48a2-aef1-81284de01dde">
    <con:settings/>
    <con:config service="GET Client Token" resourcePath="/oauth/token" methodName="GET Client Token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="GET Client Token" id="3d9e8eef-6b94-46de-8b7d-21a4174f9b47" mediaType="application/x-www-form-urlencoded" postQueryString="true">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>${Secure_auth}</con:endpoint>
        <con:request/>
        <con:originalUri>https://api.us.apiconnect.ibmcloud.com/whirlpool-developer-network-wcloud-dev/whirlpool-iot-qa/oauth/token</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="24f365cc-4afd-426f-8f41-d2659e8cd86f" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="grant_type" value="client_credentials"/>
          <con:entry key="client_secret" value="syntel123$"/>
          <con:entry key="client_id" value="syntel"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>grant_type</con:entry>
          <con:entry>client_id</con:entry>
          <con:entry>client_secret</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="6f0100a6-91e6-476c-8a30-1216e3f39821">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4398ae1d-0351-4fb3-a5a2-3711b104c124">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="dc59d3b0-2cc1-4c91-a36d-62642d50ba5a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5c297842-d8ad-466b-8b05-f06abf54bfe2">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="276146a1-7fd3-46fe-b2f6-638c85bb127c">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="1653fcad-25f1-42dc-b777-d850bb70a926">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="355af1cd-ed93-49d8-b6be-b3da6c1def92">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6279578-3a49-4834-9a7b-8e92ae71f8e9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b74c2924-5d4b-41b7-a14b-5522870d29dc">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="20272cd6-b686-4dc5-bbb9-a223e2cd1d8c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e557dfa4-ea64-4e83-988f-317cbc736505">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="caf27257-7156-4318-b2df-f8a12834f2ff">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="df44efd9-a23b-4823-b5f2-427a6ee63b9f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Report" id="b84b3a8e-19cb-464f-b654-3cd1415b95c9">
    <con:settings/>
    <con:config>
      <script>def Final_Path = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Test_Result_Path")
log.info Final_Path
def final_path = new File(Final_Path)
final_path.mkdir()


/*Get Test Case Name and Status*/

def TestCaseName = testRunner.testCase.getName()
obj = context.testCase.getTestStepByName(TestCaseName)
assertions = obj.getAssertionList()
def Status
assertions.each{
	def stat = (it.status).toString()
	if(stat == "VALID" || stat == "PASS"){
		Status = "Pass"
	}
	if(stat == "FAILED" || stat == "FAIL"){
		Status = "Fail"
	}
}
log.info(Status)
testRunner.testCase.testSuite.setPropertyValue("Status", Status)


/*Creating Txt File*/

String date = new Date()
String date_now = new Date()
date = date.replaceAll(":","_")
date = date.replaceAll(" ","_")
def TCName = TestCaseName.replaceAll(" ","_")
report_file = Final_Path + TCName + "_" + date + "_" + Status + ".txt"
/* Writing to file */
def file1 = new File(report_file)


/*Get Time Taken for request*/

obj = context.testCase.getTestStepByName(TestCaseName)
assertions = obj.getAssertionList()
def Time_Taken
assertions.each{
	Time_Taken = testRunner.testCase.testSteps[TestCaseName].testRequest.response.timeTaken
	log.info(Time_Taken)
}



/*Get Status Code*/
Header = testRunner.testCase.testSteps[TestCaseName].testRequest.response.getResponseHeaders()
Status_Code = Header["#status#"]
log.info Status_Code
file1.write("Status:  " + Status + "\n")
file1.append("Time Taken:  " + Time_Taken + " ms\n")
file1.append("TimeStamp:  " + date_now + "\n")
file1.append("Test Step:  " + TestCaseName + "\n\n\n\n")
file1.append("----------------- Http Status ------------------------------\n")
file1.append("Http Status Code:  " + Status_Code + "\n\n\n\n")
file1.append("---------------- Request ---------------------------\n")


/*Get request and response*/
myRequestStep = testRunner.testCase.getTestStepByName(TestCaseName)
def request = new String(myRequestStep.testRequest.messageExchange.rawRequestData)
def response = new String(myRequestStep.testRequest.messageExchange.rawResponseData)
file1.append(request + "\n\n\n\n")
file1.append("---------------- Response --------------------------\n")
file1.append(response)</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Skip_on_failure" id="d1d92961-450c-4a63-bb98-16763b9f01f0">
    <con:settings/>
    <con:config>
      <script>def TestCaseName = testRunner.testCase.getName()
obj = context.testCase.getTestStepByName(TestCaseName)
assertions = obj.getAssertionList()
def Status
assertions.each{
	def stat = (it.status).toString()
	if(stat == "VALID" || stat == "PASS"){
		Status = "Pass"
	}
	if(stat == "FAILED" || stat == "FAIL"){
		Status = "Fail"
	}
}
log.info(Status)

com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("Client_Token","undefined")

if(Status == "Fail"){
testRunner.testCase.testSteps.each{k, v ->    
testRunner.cancel(k)}
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Client Token - Global Variable" id="afdf120f-5e91-4685-9179-63f5ccd9fcd8">
    <con:settings/>
    <con:config>
      <script>def token = context.expand( '${GET Client Token#Response#$[\'access_token\']}' )
log.info(token)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("Client_Token", token)</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Groovy Script" id="7365dbe2-d4ca-4c90-b954-fbcee1f6fe8e" disabled="true">
    <con:settings/>
    <con:config>
      <script><![CDATA[def totalTestSuiteCount = 0;
//def enabledTestSuiteCount = 0;
//def disabledTestSuiteCount = 0;

totalTestSuiteCount = testRunner.testCase.testSuite.project.getTestSuiteCount();


for(i = 0; i < totalTestSuiteCount; i++) {
flag = testRunner.testCase.testSuite.project.getTestSuiteAt(i).isDisabled();
//if(!flag)
//enabledTestSuiteCount = enabledTestSuiteCount + 1;
//else
//disabledTestSuiteCount = disabledTestSuiteCount + 1;
}

log.info "Total Test Suite Count : " + totalTestSuiteCount;
//log.info "Total Enabled/Active Test Suite Count : " + enabledTestSuiteCount;
//log.info "Total Disabled/Reusable Test Suite Count : " + disabledTestSuiteCount;
def totalTestCaseCount = 0;
//def enabledTestCaseCount = 0;
//def disabledTestCaseCount = 0;

for(i = 0; i < totalTestSuiteCount; i++) {
flag = testRunner.testCase.testSuite.project.getTestSuiteAt(i).isDisabled();
if(!flag) {
totalTestCaseCount = totalTestCaseCount + testRunner.testCase.testSuite.project.getTestSuiteAt(i).getTestCaseCount();
}
}

//for(i = 0; i < totalTestSuiteCount; i++) {
//flag = testRunner.testCase.testSuite.project.getTestSuiteAt(i).isDisabled();
//if(!flag) {
//tccount = testRunner.testCase.testSuite.project.getTestSuiteAt(i).getTestCaseCount();
//for(j = 0; j < tccount; j++) {
//tcflag = testRunner.testCase.testSuite.project.getTestSuiteAt(i).getTestCaseAt(j).isDisabled();
//if(!tcflag)
//enabledTestCaseCount = enabledTestCaseCount + 1;
//else
//disabledTestCaseCount = disabledTestCaseCount + 1;
//}
//}
//}

log.info "Total Test Case Count : " + totalTestCaseCount;
//log.info "Total Enabled/Active Test Case Count : " + enabledTestCaseCount;
//log.info "Total Disabled/Reusable Test Case Count : " + disabledTestCaseCount;

/*def a = totalTestCaseCount;
while (a>0) {
a--;

def testCase = testRunner.testCase.testSuite.testCases["TestCase"];  
def properties = new com.eviware.soapui.support.types.StringToObjectMap();  
//def async = false;  
//testCase.run(properties, async);
}*/
for(j=0;j<10;j++){
for(i=0;i<totalTestCaseCount;i++){
	log.info "j----------"+j    +   "i----------"+ i
}
def totalTeststepCount = 0;
//def enabledTestCaseCount = 0;
//def disabledTestCaseCount = 0;

for(i = 0; i < totalTestCaseCount; i++) {
flag = testRunner.testCase.testSuite.project.getTestSuiteAt(i).isDisabled();
if(!flag) {
totalTeststepCount = totalTeststepCount + testRunner.testCase.testSuite.project.getTestSuiteAt(i).getTestCaseAt(i);getteststepCount()
}
}
	//def testCase = testRunner.testCase.testSuite.testCases["TestCase"];
	
	//log.info testCase 
//def properties = new com.eviware.soapui.support.types.StringToObjectMap(); 
//log.info properties
}]]></script>
    </con:config>
  </con:testStep>
  <con:setupScript/>
  <con:properties>
    <con:property>
      <con:name>Client_Token_Response</con:name>
      <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">{"access_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzY29wZSI6WyJ0cnVzdCIsInJlYWQiLCJ3cml0ZSJdLCJvcmdhbml6YXRpb24iOiJXaGlybHBvb2wgT3JnYW5pemF0aW9uIiwiZXhwIjoxNTEwMjMzNzk3LCJqdGkiOiJmMWUzMWEzMC1kZDY4LTRhMWYtOGZkOS02OWExNjBmMTNhZjIiLCJjbGllbnRfaWQiOiJzeW50ZWwifQ.Au0bKJQHUUKaJuGdcZmnbYWiBBJ9ZA9Yip4fmJFC1wQ","token_type":"bearer","expires_in":259200,"scope":"trust read write","organization":"Whirlpool Organization","jti":"f1e31a30-dd68-4a1f-8fd9-69a160f13af2"}</con:value>
    </con:property>
    <con:property>
      <con:name>test</con:name>
      <con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzY29wZSI6WyJ0cnVzdCIsInJlYWQiLCJ3cml0ZSJdLCJvcmdhbml6YXRpb24iOiJXaGlybHBvb2wgT3JnYW5pemF0aW9uIiwiZXhwIjoxNTA3NzI0MDI5LCJqdGkiOiJhNjI5N2Y2ZC1jYTBiLTQ3M2ItYWY3NS1kYjQ4ZjVjNGMyYTciLCJjbGllbnRfaWQiOiJzeW50ZWwifQ.PtmPh4W-JHCpsKtgw_HRfH0e0XDgkC-87uMaDlUzgOA</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>b84b3a8e-19cb-464f-b654-3cd1415b95c9</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:environmentSpec>
    <con:entry environmentId="4398ae1d-0351-4fb3-a5a2-3711b104c124">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="dc59d3b0-2cc1-4c91-a36d-62642d50ba5a">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="5c297842-d8ad-466b-8b05-f06abf54bfe2">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="276146a1-7fd3-46fe-b2f6-638c85bb127c">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="1653fcad-25f1-42dc-b777-d850bb70a926">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="355af1cd-ed93-49d8-b6be-b3da6c1def92">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="f6279578-3a49-4834-9a7b-8e92ae71f8e9">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="b74c2924-5d4b-41b7-a14b-5522870d29dc">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="e557dfa4-ea64-4e83-988f-317cbc736505">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="caf27257-7156-4318-b2df-f8a12834f2ff">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="df44efd9-a23b-4823-b5f2-427a6ee63b9f">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
</con:testCase>
