<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="ed865af3-34f6-4539-a75c-731e57ce058c" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="Get Client Version" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="ed865af3-34f6-4539-a75c-731e57ce058cfileName">Get-Client-Version</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="groovy" name="DataSource_Setup" id="656f2fe1-9992-4b95-9c08-9ac1b47febcb">
    <con:settings/>
    <con:config>
      <script>import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;
import java.lang.String
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


def TestStep_Count = testRunner.testCase.getTestStepCount()
def DataSource_Flag
def RunTimeDataSource_Flag
log.info TestStep_Count
def TestStep_Name
//******************Finding DataSource***************
for(i = 0;i &lt; TestStep_Count;i++){
	TestStep_Name = testRunner.testCase.getTestStepAt(i).name
	log.info TestStep_Name
	if(TestStep_Name == "DataSource"){
		log.info("Data Source present")
		DataSource_Flag = true
		break
	}else{
		DataSource_Flag = false
	}
}

for(i = 0; i &lt; TestStep_Count; i++){
	TestStep_Name = testRunner.testCase.getTestStepAt(i).name
	if(TestStep_Name == "DataSource_RunTime"){
		log.info("RunTime Data Source present")
		RunTimeDataSource_Flag = true
		break
	}
	else{
		RunTimeDataSource_Flag = false
		log.info("RunTime Data Source not present")
	}
}
log.info "Data Source: " + DataSource_Flag
log.info "Run Time Data Source: " + RunTimeDataSource_Flag


//******************Deleting Properties from DataSource****************
if(DataSource_Flag == true){
	log.info "Deleting DataSource Properties"
	def TestStep = testRunner.testCase.getTestStepByName("DataSource")
	def Property_Count = TestStep.propertyCount
	log.info Property_Count
	def Property_Name
	for(i = Property_Count - 1; i >= 0; i--)
	{
		Property_Name = TestStep.getPropertyAt(i).name
		log.info "Deleting: " + Property_Name
		TestStep.removeProperty(Property_Name)
	}
}else{
	log.info("Data Source not present")
}

//******************Deleting Properties from Run Time DataSource****************
if(RunTimeDataSource_Flag == true){
	log.info "Deleting RunTime DataSource Properties"
	def TestStep = testRunner.testCase.getTestStepByName("DataSource_RunTime")
	def Property_Count = TestStep.propertyCount
	log.info Property_Count
	def Property_Name
	for(i = Property_Count - 1; i >= 0; i--)
	{
		Property_Name = TestStep.getPropertyAt(i).name
		log.info "Deleting: " + Property_Name
		TestStep.removeProperty(Property_Name)
	}
}else{
	log.info("RunTime Data Source not present")
}

//*********Reading Excel and adding Property to DataSource*****************

if(DataSource_Flag == true){
	def Test_Data_Path = context.expand( '${Test_Data_Path}' )
	InputStream ExcelFileToRead = new FileInputStream(Test_Data_Path);
	XSSFWorkbook wb = new XSSFWorkbook(ExcelFileToRead);
	XSSFSheet sheet = wb.getSheet("Data")
	XSSFRow row; 
	XSSFCell cell;
	
	row = sheet.getRow(0)
	def Col_count = row.getLastCellNum()
	log.info Col_count

	log.info "Adding DataSource Properties"
	def TestStep = testRunner.testCase.getTestStepByName("DataSource")
	def Property_Name
	for(i = 0; i &lt; Col_count; i++){
		cell = row.getCell(i)
		def Cell_Value = String.valueOf(cell)
		log.info "Adding: " + Cell_Value
		TestStep.addProperty(Cell_Value)
	}
}


//**************Reading Excel and adding Property to RunTime DataSource***********
if(RunTimeDataSource_Flag == true){
	def Run_Time_Data = context.expand( '${Run_Time_Data}' )
	InputStream ExcelFileToRead = new FileInputStream(Run_Time_Data);
	HSSFWorkbook wb = new HSSFWorkbook(ExcelFileToRead);
	HSSFSheet sheet = wb.getSheet("Account_Run_Time_Data")
	HSSFRow row; 
	HSSFCell cell;
	
	row = sheet.getRow(0)
	def Col_count = row.getLastCellNum()
	log.info Col_count

	log.info "Adding DataSource Properties"
	def TestStep = testRunner.testCase.getTestStepByName("DataSource_RunTime")
	def Property_Name
	for(i = 0; i &lt; Col_count; i++){
		cell = row.getCell(i)
		def Cell_Value = String.valueOf(cell)
		log.info "Adding: " + Cell_Value
		TestStep.addProperty(Cell_Value)
	}
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasource" name="DataSource" id="ce6f5fd2-9e32-4fe0-b792-379a72bdc849">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration><file>${Test_Data_Path}</file><worksheet>Data</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty><evaluateFormulas>false</evaluateFormulas></con:configuration>
      </con:dataSource>
      <con:shared>true</con:shared>
      <con:restartShared>true</con:restartShared>
      <con:property>TC_Number</con:property>
      <con:property>Service_Name</con:property>
      <con:property>Defect_ID</con:property>
      <con:property>API_Name</con:property>
      <con:property>Data_Combination</con:property>
      <con:property>Remark</con:property>
      <con:property>Comments</con:property>
      <con:property>Account_Number</con:property>
      <con:property>Address_1</con:property>
      <con:property>Address_2</con:property>
      <con:property>Alert_ID</con:property>
      <con:property>Alert_Platform_Type</con:property>
      <con:property>Alternate_Email_ID</con:property>
      <con:property>Appliance_ID</con:property>
      <con:property>Appliance_Master_ID</con:property>
      <con:property>Appliance_Master_Version_ID</con:property>
      <con:property>Appliance_Name</con:property>
      <con:property>Attribute_Name</con:property>
      <con:property>Attribute_Value</con:property>
      <con:property>Brand</con:property>
      <con:property>City</con:property>
      <con:property>Company_ID</con:property>
      <con:property>Company_Name</con:property>
      <con:property>Confirm_Password</con:property>
      <con:property>Country_Name</con:property>
      <con:property>Country_Code</con:property>
      <con:property>Country_ID</con:property>
      <con:property>Customer_Care</con:property>
      <con:property>DCT</con:property>
      <con:property>DDM_Name</con:property>
      <con:property>desired_temperature</con:property>
      <con:property>Device_ID</con:property>
      <con:property>Device_Notification_ID</con:property>
      <con:property>Device_Shadow_Name</con:property>
      <con:property>Edge_Device_ID</con:property>
      <con:property>Elevation</con:property>
      <con:property>Email_BodyMessage</con:property>
      <con:property>Email_From</con:property>
      <con:property>Email_ID_Data</con:property>
      <con:property>Email_Subject</con:property>
      <con:property>Email_To</con:property>
      <con:property>enable_cloth_spin</con:property>
      <con:property>First_Name</con:property>
      <con:property>Group_Number</con:property>
      <con:property>Group By</con:property>
      <con:property>inv__description</con:property>
      <con:property>JSON_Body</con:property>
      <con:property>Key</con:property>
      <con:property>Language_ID</con:property>
      <con:property>languageCode</con:property>
      <con:property>Last_Name</con:property>
      <con:property>Lastupdate</con:property>
      <con:property>Latitude</con:property>
      <con:property>Locale_ID</con:property>
      <con:property>Location_Name</con:property>
      <con:property>Location_Number</con:property>
      <con:property>Longitude</con:property>
      <con:property>Loyalty_ID</con:property>
      <con:property>name</con:property>
      <con:property>Nest_Away</con:property>
      <con:property>Nest_Thermostat_ID</con:property>
      <con:property>New_Password</con:property>
      <con:property>Notification_Type</con:property>
      <con:property>Password</con:property>
      <con:property>Phone_No.</con:property>
      <con:property>Platform</con:property>
      <con:property>Postal_Code</con:property>
      <con:property>Rate_Plan_Code</con:property>
      <con:property>Rate_Plan_ID</con:property>
      <con:property>Region</con:property>
      <con:property>Role_ID</con:property>
      <con:property>SAID</con:property>
      <con:property>Shoppinglist_ID</con:property>
      <con:property>Shoppinglist_Name</con:property>
      <con:property>State_Name</con:property>
      <con:property>Status</con:property>
      <con:property>Status_ID</con:property>
      <con:property>Street</con:property>
      <con:property>trigger_temperature</con:property>
      <con:property>Utility_Name</con:property>
      <con:property>User_ID</con:property>
      <con:property>User_Role</con:property>
      <con:property>Verification_Code</con:property>
      <con:property>Version</con:property>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:restartOnRun>true</con:restartOnRun>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Flow Control" id="07b57a08-8816-4b91-b649-3f1851855021">
    <con:settings/>
    <con:config>
      <script>def dataCombination = context.expand( '${DataSource#Data_Combination}' )
def API_Name = context.expand( '${DataSource#API_Name}' )
def TestCaseName = testRunner.testCase.getName()

if (API_Name != TestCaseName){
	log.info "Skipping"
	testRunner.testCase.testSteps['Get Client Version'].setDisabled(true)
	testRunner.testCase.testSteps['Report'].setDisabled(true)
}else{
	testRunner.testCase.testSteps['Get Client Version'].setDisabled(false)
	testRunner.testCase.testSteps['Report'].setDisabled(false)
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="Get Client Version" id="5e7c6eef-2cec-4a2a-99a0-3cdda555a182" disabled="true">
    <con:settings/>
    <con:config service="Get Client Version" resourcePath="/client_auth/client_version" methodName="Get Client Version" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="Get Client Version" id="5401cca4-e099-472c-8f16-4a88b411767a" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>${#Project#API-Connect}</con:endpoint>
        <con:request/>
        <con:originalUri>https://api.us.apiconnect.ibmcloud.com/whirlpool-developer-network-wcloud-dev/whirlpool-iot-qa/api/v1/client_auth/client_version</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="019d93b7-ced1-4c6e-a4a3-31106ede6f73" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="MessageContentAssertion" id="82213839-d20b-41a4-8d68-9561871c7bbb" name="Message Content Assertion">
          <con:configuration xsi:type="con:MessageContentAssertion">
            <con:elements>
              <con:xpath>declare namespace ns1='https://api.us.apiconnect.ibmcloud.com/whirlpool-developer-network-wcloud-dev/whirlpool-iot-qa/api/v1/client_auth/client_version';
//ns1:Response[1]/ns1:status[1]</con:xpath>
              <con:element>status</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>success</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:originalMessage>&lt;Response xmlns="https://api.us.apiconnect.ibmcloud.com/whirlpool-developer-network-wcloud-dev/whirlpool-iot-qa/api/v1/client_auth/client_version">
   &lt;status>success&lt;/status>
&lt;/Response></con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="wp-client-appName" value="${#[Regression Suite#Create Client Version#Create Client Version]#RawRequest#$['application']}"/>
          <con:entry key="wp-client-platform" value="${#[Regression Suite#Create Client Version#Create Client Version]#RawRequest#$['platform']}"/>
          <con:entry key="wp-client-verion" value="${#[Regression Suite#Create Client Version#Create Client Version]#RawRequest#$['version']}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>Authorization</con:entry>
          <con:entry>wp-client-appName</con:entry>
          <con:entry>wp-client-verion</con:entry>
          <con:entry>wp-client-platform</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="1653fcad-25f1-42dc-b777-d850bb70a926">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="355af1cd-ed93-49d8-b6be-b3da6c1def92">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6279578-3a49-4834-9a7b-8e92ae71f8e9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b74c2924-5d4b-41b7-a14b-5522870d29dc">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="20272cd6-b686-4dc5-bbb9-a223e2cd1d8c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e557dfa4-ea64-4e83-988f-317cbc736505">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="caf27257-7156-4318-b2df-f8a12834f2ff">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="df44efd9-a23b-4823-b5f2-427a6ee63b9f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Report" id="36b9b931-4e21-44bd-a97d-c9d83ce1d4bd" disabled="true">
    <con:settings/>
    <con:config>
      <script>import java.io.FileInputStream
import java.io.File
import java.io.FileNotFoundException
import java.io.FileOutputStream
import java.io.IOException
import java.util.Iterator
import java.io.InputStream
import java.lang.String
import java.text.SimpleDateFormat
import org.apache.poi.EncryptedDocumentException
import org.apache.poi.openxml4j.exceptions.InvalidFormatException
import org.apache.poi.ss.util.CellReference
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.ss.usermodel.DateUtil
import org.apache.poi.ss.usermodel.Row
import org.apache.poi.ss.usermodel.Sheet
import org.apache.poi.ss.usermodel.Workbook
import org.apache.poi.ss.usermodel.WorkbookFactory
import org.apache.poi.hssf.usermodel.HSSFWorkbook
import org.apache.poi.xssf.usermodel.XSSFWorkbook
import org.apache.poi.xssf.streaming.SXSSFWorkbook
import org.apache.poi.xssf.usermodel.XSSFCell
import org.apache.poi.xssf.usermodel.XSSFRow
import org.apache.poi.xssf.usermodel.XSSFSheet
import org.apache.poi.xssf.usermodel.XSSFWorkbook


def Final_Path = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Test_Result_Path")
log.info Final_Path
def final_path = new File(Final_Path)
final_path.mkdir()


/*Get Test Case Name and Status*/
def data_combination = context.expand( '${DataSource#Data_Combination}' )
/*Get TC Name*/
def TCN = context.expand( '${DataSource#TC_Number}' )
def TestCaseName = testRunner.testCase.getName()


obj = context.testCase.getTestStepByName(TestCaseName)
assertions = obj.getAssertionList()
def Status
assertions.each{
	def stat = (it.status).toString()
	if(stat == "VALID" || stat == "PASS"){
		Status = "Pass"
	}
	if(stat == "FAILED" || stat == "FAIL"){
		Status = "Fail"
	}
}
log.info(Status)
testRunner.testCase.testSuite.setPropertyValue("Status", Status)

/*Creating Txt File*/

String date = new Date()
String date_now = new Date()
date = date.replaceAll(":","_")
date = date.replaceAll(" ","_")
def TCName = TestCaseName.replaceAll(" ","_")
report_file = Final_Path + TCN + "_" + TCName + "_" + date + "_" + Status + ".txt"
/* Writing to file */
def file1 = new File(report_file)


/*Get Time Taken for request*/

obj = context.testCase.getTestStepByName(TestCaseName)
assertions = obj.getAssertionList()
def Time_Taken
assertions.each{
	Time_Taken = testRunner.testCase.testSteps[TestCaseName].testRequest.response.timeTaken
	log.info(Time_Taken)
}



/*Get Status Code*/
Header = testRunner.testCase.testSteps[TestCaseName].testRequest.response.getResponseHeaders()
Status_Code = Header["#status#"]
log.info Status_Code
file1.write("Status:  " + Status + "\n")
file1.append("Time Taken:  " + Time_Taken + " ms\n")
file1.append("TimeStamp:  " + date_now + "\n")
file1.append("Test Step:  " + TestCaseName + "\n\n\n\n")
file1.append("----------------- Http Status ------------------------------\n")
file1.append("Http Status Code:  " + Status_Code + "\n\n\n\n")
file1.append("---------------- Request ---------------------------\n")


/*Get request and response*/
myRequestStep = testRunner.testCase.getTestStepByName(TestCaseName)
try{
def request = new String(myRequestStep.testRequest.messageExchange.rawRequestData)
def response = new String(myRequestStep.testRequest.messageExchange.rawResponseData)
file1.append(request + "\n\n\n\n")
file1.append("---------------- Response --------------------------\n")
file1.append(response)
}catch(Exception e){log.info "Request/Response empty"
}

/* Creating Excel for test result */

def Testresultpath = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Test_Result_Path")
Testresultpath = Testresultpath + "Test_Run_Results.xls"
log.info Testresultpath

FileInputStream fis = new FileInputStream(new File(Testresultpath))
Workbook wb = WorkbookFactory.create(fis)
Sheet sh = wb.getSheet("Test_Run_Results")
def Row_count = sh.getLastRowNum()
Row_count = Row_count.toInteger()
Row_count++
log.info Row_count
Row row = sh.createRow(Row_count)
Cell cell = row.createCell(0).setCellValue(TCN)
Cell cell_1 = row.createCell(1).setCellValue(Status)
Cell cell_2 = row.createCell(2).setCellValue(TestCaseName)
Cell cell_3 = row.createCell(3).setCellValue(date_now)
Cell cell_4 = row.createCell(4).setCellValue(Time_Taken)
FileOutputStream out = new FileOutputStream(Testresultpath,false)
wb.write(out)
out.close()
log.info "Report Generated"</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasourceloop" name="DataSource Loop" id="4f864b6e-8276-450c-a3cb-accf054a58fa">
    <con:settings/>
    <con:config>
      <dataSourceStep>DataSource</dataSourceStep>
      <targetStep>Flow Control</targetStep>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>5e7c6eef-2cec-4a2a-99a0-3cdda555a182</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>ce6f5fd2-9e32-4fe0-b792-379a72bdc849</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>07b57a08-8816-4b91-b649-3f1851855021</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:environmentSpec>
    <con:entry environmentId="1653fcad-25f1-42dc-b777-d850bb70a926">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="f6279578-3a49-4834-9a7b-8e92ae71f8e9">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="b74c2924-5d4b-41b7-a14b-5522870d29dc">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="e557dfa4-ea64-4e83-988f-317cbc736505">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
</con:testCase>